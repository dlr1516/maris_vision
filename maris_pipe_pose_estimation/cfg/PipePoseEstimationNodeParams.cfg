#! /usr/bin/env python

PACKAGE='maris_pipe_pose_estimation'
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

objects = gen.enum([	gen.const("Orange",	int_t, 0, "Orange Color"),
						gen.const("Gray", int_t, 1, "Gray Color"),
			gen.const("Yellow_air", int_t, 2, "Yellow Air")],
						"Color")	


#       Name       			Type      Level Description     		Default   Min    Max
#gen.add("Color", 		int_t, 	  0,    "Color", 			0, edit_method=objects)
gen.add("colorCorrection", bool_t,    0, "color correction enable flag", True)
gen.add("minH", int_t,    0, "Min H threshold for color ranging", 0, 0, 255)
gen.add("minS", int_t,    0, "Min S threshold for color ranging", 0, 0, 255)
gen.add("minV", int_t,    0, "Min V threshold for color ranging", 0, 0, 255)
gen.add("maxH", int_t,    0, "Max H threshold for color ranging", 255, 0, 255)
gen.add("maxS", int_t,    0, "Max S threshold for color ranging", 255, 0, 255)
gen.add("maxV", int_t,    0, "Max V threshold for color ranging", 255, 0, 255)
gen.add("maskThreshold", int_t,    0, "Threshold for mask binarization", 50, 0, 100)
gen.add("blurStandarDev", int_t,    0, "Blur standard deviation for color mask", 9, 0, 100)
gen.add("blurSize", int_t,    0, "Blur mask size for color mask", 31, 1, 101)
gen.add("minMaskSize", int_t,    0, "Minimum size for color mask", 100, 0, 1000000)
gen.add("angleDistBreak", int_t,    0, "Angle distance threshold for angle detection algorithm stopping [deg]", 2, 0, 180)
gen.add("angleDistThreshold", int_t,    0, "Angle distance threshold for angle detection algorithm acceptance [deg]", 10, 0, 180)
gen.add("edgeAngleDetectorThreshold", int_t,    0, "Magnitude threshold for gradient operation", 50, 0, 255)
gen.add("edgeMapThreshold", int_t,    0, "Magnitude threshold for edge map detection", 40, 0, 100)
gen.add("edgeHistogramDeviation", int_t,    0, "Threshold for edge histogram deviation", 3, 0, 10)
gen.add("terminalHistThreshold", int_t,    0, "Histogram threshold for terminal detection", 20, 0, 100)
gen.add("pipeRadius", double_t,    0, "Pipe radius [m]", 0.05, 0, 0.2)
gen.add("pipeLenght", double_t,    0, "Pipe lenght", 1, 0.2, 10)
gen.add("alphaFilter", double_t, 0, "Alpha Filter parameter", 1, 0, 1)
gen.add("betaFilter", double_t, 0, "Beta Filter parameter", 0.1, 0, 1)
gen.add("rhoThFilter", double_t, 0, "Rho Threshold Validation Filter parameter", 60, 0, 1000)
gen.add("thetaThFilter", double_t, 0, "Rho Threshold Validation Filter parameter", 0.350, 0, 4.15)



exit(gen.generate(PACKAGE, "maris_pipe_pose_estimation", "PipePoseEstimationNodeParams"))
